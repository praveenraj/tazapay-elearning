-- MySQL Script generated by MySQL Workbench
-- Monday 05 October 2020 02:35:30 PM IST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering


-- -----------------------------------------------------
-- Table `user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(64) NOT NULL,
  `last_name` VARCHAR(64) NULL,
  `mobile` VARCHAR(16) NOT NULL,
  `email` VARCHAR(64) NOT NULL,
  `num_of_courses_enrolled` TINYINT NULL,
  `num_of_courses_completed` TINYINT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'user registration date can be derived from this value',
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `mobile_UNIQUE` (`mobile` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'The details users enter during registration. Users can register using an email/mobile, and they can enroll in any course.';


-- -----------------------------------------------------
-- Table `author`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `author` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(64) NOT NULL,
  `last_name` VARCHAR(64) NULL,
  `mobile` VARCHAR(16) NOT NULL,
  `email` VARCHAR(64) NOT NULL,
  `qualification` ENUM('Ph.D', 'MSCE', 'B.E', 'B.SC') NOT NULL,
  `introduction_brief` VARCHAR(256) NOT NULL COMMENT 'A brief summary of an instructor’s educational background, work experience, skill sets, hobbies, etc.',
  `image` VARCHAR(128) NOT NULL COMMENT 'image url where it is originally saved',
  `num_of_published_courses` TINYINT NULL,
  `num_of_enrolled_students` SMALLINT NULL COMMENT 'Not necessary to keep updates in real time. Run a scheduler job to find once a day.',
  `average_review_rating` FLOAT(3,1) NULL COMMENT 'Not necessary to keep updates in real time. Run a scheduler job to find once a day.',
  `num_of_reviews` SMALLINT NULL COMMENT 'Not necessary to keep updates in real time. Run a scheduler job to find once a day.',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'author registration date can be derived from this value',
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `mobile_UNIQUE` (`mobile` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'Information regarding individual instructors. Not everyone is allowed to register as an author, only authorized individuals can submit course content.';


-- -----------------------------------------------------
-- Table `course`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `course` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(128) NOT NULL,
  `introduction_brief` VARCHAR(256) NOT NULL COMMENT 'A brief summary of an instructor’s educational background, work experience, skill sets, hobbies, etc.',
  `fee` SMALLINT NOT NULL,
  `language` ENUM('English') NOT NULL DEFAULT 'English',
  `is_active` TINYINT NULL COMMENT 'whether the course is available for the user to enroll. null/0 - disabled',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `title_idx` (`title` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'Holds basic data about courses';


-- -----------------------------------------------------
-- Table `course_author`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `course_author` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `course_id` INT NOT NULL,
  `author_id` INT NOT NULL,
  `permission` ENUM('admin', 'maintain', 'write') NOT NULL COMMENT 'admin - add/view/edit/delete/merge/publish\nmaintain - view/edit/merge/publish\nwrite - view/edit',
  `is_active` TINYINT NULL COMMENT 'whether the author is authorize to handle the course. null/0 - disabled',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_course_author_course_id_idx` (`course_id` ASC),
  INDEX `fk_course_author_author_id_idx` (`author_id` ASC),
  CONSTRAINT `fk_course_author_course_id`
    FOREIGN KEY (`course_id`)
    REFERENCES `course` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_course_author_author_id`
    FOREIGN KEY (`author_id`)
    REFERENCES `author` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'Courses may be created by 1 or more authors working together. Each has his/her own access to the course.';


-- -----------------------------------------------------
-- Table `course_section`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `course_section` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `course_id` INT NOT NULL,
  `title` VARCHAR(128) NOT NULL,
  `order` TINYINT NOT NULL COMMENT 'The position where this section will be available for the course',
  `num_of_reading` TINYINT NULL COMMENT 'The number of reading activities included in the section',
  `num_of_video` TINYINT NULL COMMENT 'The number of videos included in the section.',
  `num_of_assignment` TINYINT NULL COMMENT 'The number of assignments associated with the section.',
  `is_active` TINYINT NULL COMMENT 'whether the section is available for the course. null/0 - disabled',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_course_section_course_id_idx` (`course_id` ASC),
  CONSTRAINT `fk_course_section_course_id`
    FOREIGN KEY (`course_id`)
    REFERENCES `course` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'Stores the following records for each section of each course.';


-- -----------------------------------------------------
-- Table `course_section_lesson_content`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `course_section_lesson_content` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `link` VARCHAR(128) NOT NULL,
  `version` VARCHAR(8) NOT NULL,
  `state` ENUM('created', 'draft', 'saved', 'merged') NOT NULL,
  `time_required_in_sec` SMALLINT NOT NULL COMMENT 'The number of seconds estimated for users to complete the content.\nSection Time - sum of time required to complete each related content.\nCourse Time - sum of time required to complete each related section.',
  `parent_id` INT NOT NULL COMMENT '0 - master branch',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'Maintains lesson contents, version, state, etc.';


-- -----------------------------------------------------
-- Table `course_section_lesson`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `course_section_lesson` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `course_section_id` INT NOT NULL,
  `content_id` INT NOT NULL COMMENT 'latest saved state content or admin author selected version(if 1 or more saved state contents) will be used',
  `order` TINYINT NOT NULL COMMENT 'The position where this lesson should available for the section',
  `is_mandatory` TINYINT NULL COMMENT 'Whether completing the lesson is mandatory for the course. null/0 - non mandate',
  `is_open_for_free` TINYINT NULL COMMENT 'whether the lesson is available to users using a free enrollment. null/0 - paid content',
  `is_active` TINYINT NULL COMMENT 'whether the lesson is available for the section. null/0 - disabled',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'The position where this lesson will be available for the section',
  PRIMARY KEY (`id`),
  INDEX `fk_course_section_lesson_couser_section_id_idx` (`course_section_id` ASC),
  INDEX `fk_course_section_lesson_content_id_idx` (`content_id` ASC),
  CONSTRAINT `fk_course_section_lesson_couser_section_id`
    FOREIGN KEY (`course_section_id`)
    REFERENCES `course_section` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_course_section_lesson_content_id`
    FOREIGN KEY (`content_id`)
    REFERENCES `course_section_lesson_content` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'Holds lesson details for each section.';


-- -----------------------------------------------------
-- Table `enrollment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `enrollment` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `course_id` INT NOT NULL,
  `is_paid_subscription` TINYINT NULL COMMENT 'Whether the enrollment is free or paid. null/0 - free',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'The date when the enrollment took place.',
  PRIMARY KEY (`id`),
  INDEX `fk_enrollment_user_id_idx` (`user_id` ASC),
  INDEX `fk_enrollment_course_id_idx` (`course_id` ASC),
  CONSTRAINT `fk_enrollment_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_enrollment_course_id`
    FOREIGN KEY (`course_id`)
    REFERENCES `course` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'Stores user-course information';


-- -----------------------------------------------------
-- Table `learning_progress`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `learning_progress` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `enrollment_id` INT NOT NULL,
  `course_section_lesson_id` INT NOT NULL COMMENT 'The ID for the section lesson related to this record',
  `status` ENUM('P', 'C') NOT NULL COMMENT 'P - in progress, C - complete',
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'The timestamp when the user starts the lesson.',
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'The timestamp when the user finishes the lesson recently (if a user goes through the lesson multiple times).',
  PRIMARY KEY (`id`),
  INDEX `fk_learning_progress_enrollment_id_idx` (`enrollment_id` ASC),
  INDEX `fk_learning_progress_lesson_id_idx` (`course_section_lesson_id` ASC),
  CONSTRAINT `fk_learning_progress_enrollment_id`
    FOREIGN KEY (`enrollment_id`)
    REFERENCES `enrollment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_learning_progress_lesson_id`
    FOREIGN KEY (`course_section_lesson_id`)
    REFERENCES `course_section_lesson` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'Holds details about user''s progress through a course.';


-- -----------------------------------------------------
-- Table `feedback`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `feedback` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `enrollment_id` INT NOT NULL,
  `rating_score` TINYINT NOT NULL COMMENT 'This value ranges from 1 (worst) to 5 (best).',
  `message` VARCHAR(256) NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_feedback_enrollment_id_idx` (`enrollment_id` ASC),
  CONSTRAINT `fk_feedback_enrollment_id`
    FOREIGN KEY (`enrollment_id`)
    REFERENCES `enrollment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'Stores feedback and reviews submitted by user for the enrolled course';


-- -----------------------------------------------------
-- Table `payment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `payment` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `enrollment_id` INT NOT NULL,
  `transaction_number` VARCHAR(16) NOT NULL,
  `amount` SMALLINT NOT NULL,
  `mode` ENUM('credit card', 'debit card', 'upi', 'wallet') NOT NULL,
  `state` ENUM('new', 'success', 'failure') NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `fk_payment_enrollment_id_idx` (`enrollment_id` ASC),
  CONSTRAINT `fk_payment_enrollment_id`
    FOREIGN KEY (`enrollment_id`)
    REFERENCES `enrollment` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'Payment made for the course enrollment';


-- -----------------------------------------------------
-- Table `config`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `config` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `type` VARCHAR(32) NOT NULL,
  `key` VARCHAR(32) NOT NULL,
  `value` VARCHAR(128) NOT NULL,
  `description` VARCHAR(128) NOT NULL,
  `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `type_key_UNIQUE` (`type` ASC, `key` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_unicode_ci
COMMENT = 'maintains application''s critical configurations';
